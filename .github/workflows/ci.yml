name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =================== STAGE 1: TEST & QUALITY ===================
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        
    - name: Run flake8
      run: flake8 .

  unit_tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
        
    - name: Run unit tests with coverage
      env:
        CI: true
      run: |
        pytest -c pytest-units.ini tests/ --cov=src --cov=auth --cov-report=xml --cov-report=html --junitxml=pytest-report.xml
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          coverage.xml
          pytest-report.xml

  regression_tests:
    name: Regression Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest
        
    - name: Run regression tests
      env:
        CI: true
      run: |
        pytest -c pytest-regression.ini tests/test_regression.py

  sonar:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: unit_tests
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Download coverage reports
      uses: actions/download-artifact@v4
      with:
        name: coverage-reports
        
    - name: List coverage files (debug)
      run: |
        ls -la
        if [ -f coverage.xml ]; then
          echo "‚úÖ coverage.xml found"
          head -20 coverage.xml
        else
          echo "‚ùå coverage.xml not found"
        fi
        
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        # Force project creation if not exists
        SONAR_SCANNER_OPTS: "-Dsonar.projectKey=emploi_temps_cicd -Dsonar.organization=zahamizaz"
      continue-on-error: true

  # =================== STAGE 2: BUILD ===================
  build_exe:
    name: Build Executable
    runs-on: ubuntu-latest
    needs: [lint, unit_tests, regression_tests, sonar]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk patchelf
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Build executable
      run: |
        pyinstaller wigor.spec
        
    - name: Upload executable
      uses: actions/upload-artifact@v4
      with:
        name: wigor-viewer-executable
        path: dist/wigor-viewer

  docker_build_test:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [lint, unit_tests, regression_tests, sonar]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        load: true
        push: false
        tags: wigor-viewer:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Run smoke test
      run: |
        docker run --rm wigor-viewer:test --check

  # =================== STAGE 3: DEPLOY ===================
  deploy_simulation:
    name: Deploy (Simulation)
    runs-on: ubuntu-latest
    needs: [build_exe, docker_build_test]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download executable
      uses: actions/download-artifact@v4
      with:
        name: wigor-viewer-executable
        path: ./artifacts
        
    - name: Simulate Production Deployment
      run: |
        echo "üéØ CI/CD EXPRESS VOIE 9¬æ - D√âPLOIEMENT SIMUL√â"
        echo "============================================="
        echo ""
        echo "‚úÖ Toutes les √©tapes pr√©c√©dentes valid√©es :"
        echo "   - Tests unitaires (52 tests)"
        echo "   - Tests de non-r√©gression" 
        echo "   - V√©rification PEP8/flake8"
        echo "   - Test image Docker"
        echo "   - Compilation projet (PyInstaller)"
        echo "   - SonarCloud qualit√© code"
        echo ""
        echo "ÔøΩ Simulation du d√©ploiement :"
        echo "   - Artefacts pr√™ts : $(ls -la ./artifacts)"
        echo "   - Image Docker : wigor-viewer:${{ github.ref_name }}"
        echo "   - Version d√©ploy√©e : ${{ github.ref_name }}"
        echo ""
        echo "‚úÖ D√âPLOIEMENT SIMUL√â R√âUSSI !"
        echo "ÔøΩ D√©fi CI/CD EXPRESS VOIE 9¬æ VALID√â !"