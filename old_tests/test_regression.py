"""
Tests de non-r√©gression pour le parsing des emplois du temps.
V√©rifie que le parser produit toujours le m√™me r√©sultat pour des fixtures donn√©es.
"""

import json
import unittest
from pathlib import Path
from pprint import pformat
from typing import Any, Dict, List

try:
    from src.timetable_parser import parse_wigor_html
except ImportError:
    # Import pour tests ex√©cut√©s depuis le r√©pertoire racine
    import sys

    sys.path.append(".")
    from src.timetable_parser import parse_wigor_html


class TestTimetableRegression(unittest.TestCase):
    """Tests de non-r√©gression pour le parsing d'emploi du temps."""

    def setUp(self):
        """Configuration des chemins de fichiers."""
        self.project_root = Path(__file__).parent
        self.fixtures_dir = self.project_root / "fixtures"
        self.snapshots_dir = self.project_root / "tests" / "snapshots"

        # Fichiers de test
        self.sample_html = self.fixtures_dir / "sample_timetable.html"
        self.expected_json = self.snapshots_dir / "expected_timetable.json"

    def load_fixture(self, filename: str) -> str:
        """
        Charge une fixture HTML.

        Args:
            filename: Nom du fichier de fixture

        Returns:
            str: Contenu HTML de la fixture
        """
        fixture_path = self.fixtures_dir / filename
        self.assertTrue(fixture_path.exists(), f"Fixture non trouv√©e: {fixture_path}")

        with open(fixture_path, "r", encoding="utf-8") as f:
            return f.read()

    def load_expected_result(self, filename: str) -> List[Dict[str, Any]]:
        """
        Charge le r√©sultat attendu depuis un snapshot JSON.

        Args:
            filename: Nom du fichier snapshot

        Returns:
            List[Dict[str, Any]]: R√©sultat attendu
        """
        snapshot_path = self.snapshots_dir / filename
        self.assertTrue(snapshot_path.exists(), f"Snapshot non trouv√©: {snapshot_path}")

        with open(snapshot_path, "r", encoding="utf-8") as f:
            return json.load(f)

    def save_actual_result(self, result: List[Dict[str, Any]], filename: str):
        """
        Sauvegarde le r√©sultat actuel pour d√©bogage.

        Args:
            result: R√©sultat actuel du parsing
            filename: Nom du fichier de sauvegarde
        """
        actual_path = self.snapshots_dir / f"actual_{filename}"
        with open(actual_path, "w", encoding="utf-8") as f:
            json.dump(result, f, indent=2, ensure_ascii=False)
        print(f"R√©sultat actuel sauv√© dans: {actual_path}")

    def format_diff_message(self, expected: List, actual: List) -> str:
        """
        Formate un message d'erreur d√©taill√© pour les diff√©rences.

        Args:
            expected: R√©sultat attendu
            actual: R√©sultat actuel

        Returns:
            str: Message d'erreur format√©
        """
        message_parts = [
            "‚ùå Le r√©sultat du parsing ne correspond pas au snapshot attendu!",
            "",
            "üìä Statistiques:",
            f"  ‚Ä¢ Attendu: {len(expected)} cours",
            f"  ‚Ä¢ Obtenu: {len(actual)} cours",
            "",
        ]

        # Comparaison simple des longueurs
        if len(expected) != len(actual):
            message_parts.extend(
                [
                    "üìè Diff√©rence de nombre de cours:",
                    f"  Attendu {len(expected)} cours, obtenu {len(actual)} cours",
                    "",
                ]
            )

        # Afficher les cours attendus
        if expected:
            message_parts.extend(["üìã Cours attendus:", ""])
            for i, course in enumerate(expected):
                summary = self._format_course_summary(course)
                message_parts.append(f"  [{i}] {summary}")
            message_parts.append("")

        # Afficher les cours obtenus
        if actual:
            message_parts.extend(["ÔøΩ Cours obtenus:", ""])
            for i, course in enumerate(actual):
                summary = self._format_course_summary(course)
                message_parts.append(f"  [{i}] {summary}")
            message_parts.append("")

        # Comparaison d√©taill√©e si m√™me nombre d'√©l√©ments
        if len(expected) == len(actual) and len(expected) > 0:
            message_parts.extend(["üîç Diff√©rences d√©taill√©es:", ""])
            for i, (exp_course, act_course) in enumerate(zip(expected, actual)):
                if exp_course != act_course:
                    message_parts.append(f"  Cours {i}:")
                    message_parts.append(f"    Attendu: {pformat(exp_course, width=80)}")
                    message_parts.append(f"    Obtenu:  {pformat(act_course, width=80)}")
                    message_parts.append("")

        message_parts.extend(
            [
                "üîß Actions possibles:",
                "  1. V√©rifier que les changements sont intentionnels",
                "  2. Mettre √† jour le snapshot si le nouveau format est correct:",
                f"     copy tests\\snapshots\\actual_expected_timetable.json {self.expected_json}",
                "  3. Corriger le parser si les changements sont des r√©gressions",
                "",
            ]
        )

        return "\n".join(message_parts)

    def _format_course_summary(self, course: Dict[str, Any]) -> str:
        """
        Formate un r√©sum√© lisible d'un cours.

        Args:
            course: Dictionnaire repr√©sentant un cours

        Returns:
            str: R√©sum√© du cours
        """
        titre = course.get("titre", "N/A")
        horaire = course.get("horaire", course.get("heure_debut", "N/A"))
        salle = course.get("salle", "N/A")
        prof = course.get("prof", "N/A")

        return f"{titre} | {horaire} | {salle} | {prof}"

    def test_sample_timetable_parsing(self):
        """
        Test de non-r√©gression principal pour le parsing de sample_timetable.html.

        Ce test v√©rifie que le parser produit exactement le m√™me r√©sultat
        que le snapshot enregistr√©. Toute modification du format de sortie
        du parser sera d√©tect√©e.
        """
        # Charger la fixture HTML
        html_content = self.load_fixture("sample_timetable.html")

        # Parser le HTML
        actual_result = parse_wigor_html(html_content)

        # Charger le r√©sultat attendu
        expected_result = self.load_expected_result("expected_timetable.json")

        # Sauvegarder le r√©sultat actuel pour d√©bogage
        self.save_actual_result(actual_result, "expected_timetable.json")

        # Comparer les r√©sultats
        if expected_result != actual_result:
            error_message = self.format_diff_message(expected_result, actual_result)
            self.fail(error_message)

        # V√©rifications suppl√©mentaires de structure
        self.assertIsInstance(actual_result, list, "Le r√©sultat doit √™tre une liste")

        for i, course in enumerate(actual_result):
            self.assertIsInstance(course, dict, f"Le cours √† l'index {i} doit √™tre un dictionnaire")

            # V√©rifier la pr√©sence des champs critiques
            critical_fields = ["titre", "horaire"]
            for field in critical_fields:
                self.assertIn(
                    field, course, f"Le champ '{field}' est manquant dans le cours {i}: {course}"
                )

    def test_empty_html_parsing(self):
        """Test que le parser g√®re correctement le HTML vide."""
        empty_html = "<html><body></body></html>"
        result = parse_wigor_html(empty_html)

        self.assertIsInstance(result, list, "Le r√©sultat doit √™tre une liste m√™me pour HTML vide")
        self.assertEqual(len(result), 0, "HTML vide devrait retourner une liste vide")

    def test_malformed_html_parsing(self):
        """Test que le parser g√®re les HTML malform√©s sans crash."""
        malformed_html = "<html><div>Contenu cass√©<span>Non ferm√©</html>"

        # Ne doit pas lever d'exception
        try:
            result = parse_wigor_html(malformed_html)
            self.assertIsInstance(result, list, "Doit retourner une liste m√™me avec HTML malform√©")
        except Exception as e:
            self.fail(f"Le parser ne doit pas crash sur HTML malform√©: {e}")

    def test_parser_output_structure(self):
        """Test de la structure g√©n√©rale de sortie du parser."""
        html_content = self.load_fixture("sample_timetable.html")
        result = parse_wigor_html(html_content)

        # Le r√©sultat doit toujours √™tre une liste
        self.assertIsInstance(result, list)

        # Chaque √©l√©ment doit √™tre un dictionnaire
        for i, item in enumerate(result):
            self.assertIsInstance(
                item, dict, f"L'√©l√©ment {i} doit √™tre un dictionnaire, re√ßu: {type(item)}"
            )


if __name__ == "__main__":
    # Configuration pour des messages d'erreur plus lisibles
    unittest.TestCase.maxDiff = None

    # Lancer les tests
    unittest.main(verbosity=2)
