#!/usr/bin/env python3
"""
Script pour cr√©er un ex√©cutable Windows du Wigor Viewer.
Utilise PyInstaller pour packager l'application Tkinter en un seul fichier .exe
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def clean_build_dirs():
    """Nettoie les dossiers de build pr√©c√©dents."""
    dirs_to_clean = ['build', 'dist', '__pycache__']
    for dir_name in dirs_to_clean:
        if os.path.exists(dir_name):
            print(f"üßπ Nettoyage du dossier {dir_name}/")
            shutil.rmtree(dir_name, ignore_errors=True)
    
    # Nettoyer les fichiers .spec pr√©c√©dents
    for spec_file in Path('.').glob('*.spec'):
        print(f"üßπ Suppression de {spec_file}")
        spec_file.unlink()

def install_dependencies():
    """Installe PyInstaller si n√©cessaire."""
    try:
        import PyInstaller
        print("‚úÖ PyInstaller d√©j√† install√©")
    except ImportError:
        print("üì¶ Installation de PyInstaller...")
        subprocess.run([sys.executable, '-m', 'pip', 'install', 'pyinstaller'], check=True)

def create_executable():
    """Cr√©e l'ex√©cutable avec PyInstaller."""
    print("üî® Cr√©ation de l'ex√©cutable Wigor Viewer...")
    
    # Commande PyInstaller avec options optimis√©es
    cmd = [
        'pyinstaller',
        '--onefile',                    # Un seul fichier ex√©cutable
        '--windowed',                   # Pas de console (pour GUI)
        '--name=WigorViewer',          # Nom de l'ex√©cutable
        '--icon=icon.ico',             # Ic√¥ne (si elle existe)
        '--add-data=src;src',          # Inclure le dossier src
        '--hidden-import=tkinter',     # Forcer l'inclusion de tkinter
        '--hidden-import=tkinter.ttk', # Forcer l'inclusion de ttk
        '--hidden-import=requests',    # Forcer l'inclusion de requests
        '--hidden-import=bs4',         # Forcer l'inclusion de BeautifulSoup
        '--clean',                     # Nettoyer avant build
        'run.py'                       # Script principal
    ]
    
    # Retirer l'ic√¥ne si le fichier n'existe pas
    if not os.path.exists('icon.ico'):
        cmd.remove('--icon=icon.ico')
        print("‚ö†Ô∏è Pas d'ic√¥ne trouv√©e, ex√©cutable sans ic√¥ne personnalis√©e")
    
    try:
        subprocess.run(cmd, check=True)
        print("‚úÖ Ex√©cutable cr√©√© avec succ√®s!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors de la cr√©ation: {e}")
        return False

def create_spec_file():
    """Cr√©e un fichier .spec personnalis√© pour plus de contr√¥le."""
    spec_content = '''
# -*- mode: python ; coding: utf-8 -*-

block_cipher = None

a = Analysis(
    ['run.py'],
    pathex=[],
    binaries=[],
    datas=[('src', 'src')],
    hiddenimports=[
        'tkinter',
        'tkinter.ttk',
        'requests',
        'bs4',
        'datetime',
        'logging',
        're',
        'threading'
    ],
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='WigorViewer',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=False,  # Pas de console pour l'application GUI
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
)
'''
    
    with open('WigorViewer.spec', 'w', encoding='utf-8') as f:
        f.write(spec_content.strip())
    print("üìÑ Fichier WigorViewer.spec cr√©√©")

def build_from_spec():
    """Construit l'ex√©cutable √† partir du fichier .spec."""
    print("üî® Construction √† partir du fichier .spec...")
    try:
        subprocess.run(['pyinstaller', '--clean', 'WigorViewer.spec'], check=True)
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors de la construction: {e}")
        return False

def create_icon():
    """Cr√©e une ic√¥ne simple si elle n'existe pas."""
    if not os.path.exists('icon.ico'):
        print("üé® Cr√©ation d'une ic√¥ne simple...")
        # On pourrait cr√©er une ic√¥ne basique ici, mais pour simplifier on skip
        print("‚ÑπÔ∏è Pas d'ic√¥ne cr√©√©e automatiquement. Vous pouvez ajouter icon.ico manuellement.")

def main():
    """Fonction principale de build."""
    print("üöÄ Build de l'ex√©cutable Wigor Viewer")
    print("=" * 50)
    
    # V√©rifier qu'on est dans le bon r√©pertoire
    if not os.path.exists('run.py'):
        print("‚ùå Erreur: run.py introuvable. Lancez ce script depuis la racine du projet.")
        sys.exit(1)
    
    # √âtapes de build
    clean_build_dirs()
    install_dependencies()
    create_icon()
    create_spec_file()
    
    # Tenter la construction
    if build_from_spec():
        print("\\nüéâ BUILD R√âUSSI!")
        print("üìÅ L'ex√©cutable se trouve dans: dist/WigorViewer.exe")
        print("üí° Vous pouvez distribuer ce fichier sans installer Python")
        
        # Afficher la taille du fichier
        exe_path = Path('dist/WigorViewer.exe')
        if exe_path.exists():
            size_mb = exe_path.stat().st_size / (1024 * 1024)
            print(f"üìä Taille de l'ex√©cutable: {size_mb:.1f} MB")
    else:
        print("\\nüí• BUILD √âCHOU√â!")
        print("üîç V√©rifiez les erreurs ci-dessus et r√©essayez")
        sys.exit(1)

if __name__ == "__main__":
    main()