[tox]
envlist = lint, py310
skip_missing_interpreters = true
minversion = 3.24.0

[testenv]
recreate = true
deps = 
    -r{toxinidir}/requirements-dev.txt
setenv =
    PYTHONPATH = {toxinidir}
    COVERAGE_FILE = {toxinidir}/.coverage

[testenv:lint]
description = Run code quality checks (linting, formatting, imports)
deps = 
    flake8>=6.0.0
    black>=23.7.0
    isort>=5.12.0
    bandit>=1.7.5
    safety>=2.3.0
commands = 
    ; Code formatting check
    black --check --diff src/ tests/ test_regression.py
    ; Import sorting check
    isort --check-only --diff src/ tests/ test_regression.py
    ; PEP8 compliance check
    flake8 src/ tests/ test_regression.py
    ; Security analysis
    bandit -r src/ -f json -o {toxinidir}/bandit-report.json
    ; Dependency vulnerability check
    safety check --json --output {toxinidir}/safety-report.json

[testenv:py310]
description = Run tests with Python 3.10 and generate coverage reports
basepython = python3.10
deps = 
    -r{toxinidir}/requirements-dev.txt
    pytest>=7.4.0
    pytest-cov>=4.1.0
    pytest-html>=3.2.0
    pytest-xdist>=3.3.0
    coverage>=7.2.0
commands = 
    ; Run tests with coverage
    pytest {posargs} \
        --cov=src \
        --cov-report=term-missing \
        --cov-report=html:{toxinidir}/htmlcov \
        --cov-report=xml:{toxinidir}/coverage.xml \
        --cov-fail-under=70 \
        --html={toxinidir}/pytest-report.html \
        --self-contained-html \
        --junitxml={toxinidir}/pytest-results.xml \
        -v
    ; Generate coverage badge (optional)
    coverage report --format=markdown > {toxinidir}/coverage-report.md

[testenv:py39]
description = Run tests with Python 3.9
basepython = python3.9
deps = {[testenv:py310]deps}
commands = {[testenv:py310]commands}

[testenv:py311]
description = Run tests with Python 3.11  
basepython = python3.11
deps = {[testenv:py310]deps}
commands = {[testenv:py310]commands}

[testenv:py312]
description = Run tests with Python 3.12
basepython = python3.12
deps = {[testenv:py310]deps}
commands = {[testenv:py310]commands}

[testenv:regression]
description = Run regression tests only
deps = {[testenv:py310]deps}
commands = 
    pytest test_regression.py -v \
        --cov=src \
        --cov-report=xml:{toxinidir}/regression-coverage.xml

[testenv:integration]
description = Run integration tests
deps = {[testenv:py310]deps}
commands = 
    pytest tests/ -m "integration" -v

[testenv:smoke]
description = Run smoke tests (CLI checks)
deps = 
    -r{toxinidir}/requirements.txt
commands = 
    python -m src.cli --check
    python -m src.cli --version

[testenv:build]
description = Test building the application
deps = 
    -r{toxinidir}/requirements-dev.txt
    pyinstaller>=5.13.0
commands = 
    ; Clean previous builds
    python -c "import shutil; shutil.rmtree('build', ignore_errors=True); shutil.rmtree('dist', ignore_errors=True)"
    ; Build executable
    pyinstaller --onefile --windowed --name=WigorViewer \
        --add-data "assets;assets" \
        --hidden-import=tkinter \
        --hidden-import=requests \
        --hidden-import=bs4 \
        run.py
    ; Test that executable was created
    python -c "from pathlib import Path; assert Path('dist/WigorViewer.exe').exists(), 'Executable not found'"

[testenv:security]
description = Run comprehensive security analysis
deps = 
    bandit>=1.7.5
    safety>=2.3.0
    semgrep
commands = 
    bandit -r src/ -f json -o {toxinidir}/bandit-detailed.json
    safety check --json --output {toxinidir}/safety-detailed.json
    ; semgrep --config=auto src/ --json --output={toxinidir}/semgrep-report.json

[testenv:docs]
description = Build documentation (if added later)
deps = 
    sphinx>=7.1.0
    sphinx-rtd-theme>=1.3.0
commands = 
    ; sphinx-build -W -b html docs/ {toxinidir}/docs/_build/html

[testenv:clean]
description = Clean all build artifacts and cache files
deps = 
skip_install = true
commands = 
    python -c "
    import shutil
    import os
    dirs_to_clean = [
        'build', 'dist', '.pytest_cache', 'htmlcov', 
        '.mypy_cache', '.tox', '__pycache__'
    ]
    files_to_clean = [
        '.coverage', 'coverage.xml', 'pytest-results.xml',
        'pytest-report.html', 'bandit-report.json', 'safety-report.json'
    ]
    for d in dirs_to_clean:
        shutil.rmtree(d, ignore_errors=True)
        print(f'Cleaned directory: {{d}}')
    for f in files_to_clean:
        try:
            os.remove(f)
            print(f'Cleaned file: {{f}}')
        except FileNotFoundError:
            pass
    "

; Configuration pour pytest
[pytest]
testpaths = tests test_regression.py
python_files = test_*.py *_test.py  
python_classes = Test*
python_functions = test_*
markers =
    unit: Unit tests
    integration: Integration tests
    slow: Slow running tests
    gui: GUI related tests
addopts = 
    --strict-markers
    --tb=short

; Configuration pour coverage
[coverage:run]
source = src
parallel = true
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */venv/*
    */build/*
    */dist/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml

; Configuration flake8 (référence au fichier .flake8)
[flake8]
extend-config = .flake8